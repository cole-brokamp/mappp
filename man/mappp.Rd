% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mappp.R
\name{mappp}
\alias{mappp}
\title{map in parallel with progress}
\usage{
mappp(
  .x,
  .f,
  parallel = FALSE,
  cache = FALSE,
  cache.name = "cache",
  error.value = NA,
  quiet = TRUE,
  num.cores = NULL
)
}
\arguments{
\item{.x}{list or vector of objects to apply over}

\item{.f}{function to apply; allows for compact anonymous functions (see
\code{purrr::as_mapper()} for details)}

\item{parallel}{logical; use parallel processing?}

\item{cache}{defaults to FALSE, which means no cache used. If TRUE, cache the results locally in a folder named according to \code{cache.name} using the memoise package}

\item{cache.name}{a character string to use a custom cache folder name (e.g. "my_cache"); defaults to "cache"}

\item{error.value}{(defaults to NA) use purrr::possibly to replace errors with this value instead of interrupting the process; set to NULL to not use error handling and instead interrupt the calculation}

\item{quiet}{logical, suppress error messages until the end of calculation? or show them as they occur}

\item{num.cores}{the number of cores used for parallel processing.  Can be
specified as an integer, or it will guess the number of cores available
with detectCores(). won't have an effect if parallel is FALSE}
}
\description{
This function is a wrapper around purrr::map() with some extras on top,
including parallel computation, progress bar, error handling, and result caching.
}
\details{
\code{mappp} is designed for long computations and as such it always uses a progress bar,
and always returns a list. Long computations shouldn't worry about being type
strict; instead, extract results in the right type from the results list.

A progress bar will be shown in the terminal using an interactive R session or
in an .Rout file, if using R CMD BATCH and submitting R scripts for
non-interactive completion. Although R Studio supports the progress bar for
single process workers, it has a problem showing the progress bar if using
parallel processing (see the discussion at
http://stackoverflow.com/questions/27314011/mcfork-in-rstudio). In this
specific case (R Studio + parallel processing), text updates will be printed
to the file `.process`. Use a shell and `tail -f .progress` to see the
updates.
}
\examples{
\dontrun{
X <- list('x' = 100, 'y' = 'a', 'z' = 200)
slow_log <- function(.x) {Sys.sleep(0.5); log(.x)}
# by default returns NA on error
mappp(X, slow_log)
# when not using error, entire calculation will fail
mappp(X, slow_log, error.value=NULL)
# showing error messages when they occur rather than afterwards can be useful
# but will cause problems with error bar displays
mappp(X, slow_log, quiet = FALSE)
}
}
